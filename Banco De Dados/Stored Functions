CREATE SCHEMA IF NOT EXISTS `Aula_Functions` DEFAULT CHARACTER SET utf8;
USE `Aula_Functions`;

CREATE TABLE IF NOT EXISTS `aluno`(
`id` INT NOT NULL,
`nome` VARCHAR(100) NOT NULL,
`matricula` VARCHAR(45) NOT NULL,
`data_nascimento` DATE NULL,
`data_matricula` DATE NOT NULL,
PRIMARY KEY(`id`),
UNIQUE INDEX `matricula_UNIQUE` (`matricula` ASC)
)ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `prova`(
`id` INT NOT NULL,
`data_realizacao` DATE NOT NULL,
`descricao` VARCHAR(255) NOT NULL,
PRIMARY KEY(`id`)
)ENGINE = InnoDB;

CREATE TABLE IF NOT EXISTS `nota`(
`aluno_id` INT NOT NULL,
`prova_id` INT NOT NULL,
`valor_nota` DECIMAL(15,2) NULL,
PRIMARY KEY(`aluno_id`, `prova_id`),
INDEX `fk_aluno_has_prova_prova1` (`prova_id` ASC),
INDEX `fk_aluno_has_prova_aluno1` (`aluno_id` ASC),
CONSTRAINT `fk_aluno_has_prova_aluno1`
	FOREIGN KEY(`aluno_id`)
    REFERENCES `aluno`(`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
CONSTRAINT `fk_aluno_has_prova_prova1`
	FOREIGN KEY(`prova_id`)
    REFERENCES `prova`(`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;
    
INSERT INTO `aluno` VALUES 
(1, 'Michael John', '123A', '1993-08-23', CURRENT_DATE()),
(2, 'Willians Junior', '400B', '1993-04-10', CURRENT_DATE()),
(3, 'John Billboard', '420B', '1993-07-30', CURRENT_DATE()),
(4, 'Jenny Killy', '010A', NULL, '2014-01-25');
    
INSERT INTO `prova` VALUES
(1, '2014-03-30', 'Prova A1'),
(2, '2014-04-30', 'Prova B1'),
(3, '2014-05-30', 'Prova C1'),
(4, '2014-07-30', 'Prova A2'),
(5, '2014-08-30', 'Prova B2'),
(6, '2014-09-30', 'Prova C2');
    
INSERT INTO `nota` VALUES
#ALUNO 1 
(1,1,10),
(1,2,9.8),
(1,3,8),
(1,4,10),
(1,5,10),
(1,6,9),

#ALUNO 2
(2,1,7),
(2,2,7.5),
(2,3,6),
(2,4,8),
(2,5,8.5),
(2,6,9),

#ALUNO 3
(3,1,9),
(3,2,9),
(3,3,9),
(3,4,10),
(3,5,10),
(3,6,9.8),

#ALUNO 4
(4,1,3),
(4,2,6),
(4,3,7),
(4,4,8),
(4,5,7),
(4,6,7);

DELIMITER $$

CREATE FUNCTION `calcula_nota`(`nota` NUMERIC(15,2)) RETURNS NUMERIC(15,2)
BEGIN
DECLARE peso INT;
    IF `nota` > 9.5 THEN
     SET peso = 2;
	ELSE 
     SET peso = 1;
	END IF;
    
    RETURN (nota*peso) / 20;
END

SET DELIMITER ;

SELECT `a`.`nome`, `p`.`descricao`,`calcula_nota`(`n`.`valor_nota`) AS `nota_calculada`, `n`.`valor_nota` AS `nota_original`
FROM `aluno` `a` INNER JOIN `nota` `n` ON `a`.`id` = `n`.`aluno_id`
INNER JOIN `prova` `p` ON `n`.`prova_id` = `p`.`id`
ORDER BY `a`.`id`, `nota_calculada` DESC;

SELECT `a`.`nome`,(SUM(`calcula_nota`(`n`.`valor_nota`))/6) AS `nota_calculada_media`
FROM `aluno` `a` INNER JOIN `nota` `n` ON `a`.`id` = `n`.`aluno_id`
INNER JOIN `prova` `p` ON `n`.`prova_id` = `p`.`id`
GROUP BY `a`.`nome`
ORDER BY `nota_calculada_media` DESC;

DELIMITER $$

CREATE FUNCTION `mostra_maior_nota`() RETURNS DECIMAL(15,2)
BEGIN
    RETURN (SELECT MAX(`valor_nota`) FROM `nota`);
END

SET DELIMITER ;

SELECT `mostra_maior_nota`();

DELIMITER $$
CREATE FUNCTION `mostra_media`(`nota` NUMERIC(15,2)) RETURNS NUMERIC(15,2)
BEGIN
DECLARE media NUMERIC(15,2);
SET media = nota / 6;
RETURN media;
END $

SET DELIMITER ;

SELECT `n`.`aluno_id` AS 'Id_Aluno',
(SUM(`mostra_media`(`n`.`valor_nota`))) AS 'Media_Aluno_Das_6_Provas' FROM `nota` `n` GROUP BY `n`.`aluno_id`;

DELIMITER $
CREATE PROCEDURE `arredondamento_nota`()
BEGIN
 DECLARE `nota_atual` NUMERIC(15,2);
 DECLARE `id_aluno`, `id_prova` INT;
 
 DECLARE `cur` CURSOR FOR SELECT `valor_nota`, `aluno_id`, `prova_id` FROM `nota`;
 
 OPEN `cur`;
 
myloop:
 LOOP
		
        FETCH `cur` INTO `nota_atual`, `id_aluno`, `id_prova`;
        
        IF (CEIL(`nota_atual`) - `nota_atual`) <= 0.2 THEN
				UPDATE `nota` SET `valor_nota` = CEIL(`nota_atual`)
                WHERE `aluno_id` = `id_aluno` AND `prova_id` = `id_prova`;
		END IF;
 END LOOP;
 
 CLOSE `cur`;
 
END $

DELIMITER ;
 
 CALL `arredondamento_nota`();
 SELECT * FROM `nota`;
